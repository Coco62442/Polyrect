{"version":3,"file":"js/259.663f6b1a.js","mappings":"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","sources":["webpack://polyrecte/./src/views/ProfView/ModifNoteView.vue","webpack://polyrecte/./src/views/ProfView/ModifNoteView.vue?060a"],"sourcesContent":["<template>\n    <div>\n        <nav>\n            <router-link to=\"/loginProf\">Ajouter des Notes</router-link>\n            <router-link to=\"/modifNote\">Modifier des Notes</router-link>\n            <router-link to=\"/ajoutAbsence\">Ajouter des Absences</router-link>\n            <router-link to=\"/modifAbsence\">Modifier des Absences</router-link>\n            <router-link to=\"/profilProf\">Mettre à jour votre profil</router-link>\n        </nav>\n        <button v-on:click='profLogout()' class=\"deconnexion\">Déconnexion</button>\n        <hr>\n        <div v-for=\"(eleve, index1) in listeEleve\" :key=\"eleve._id\">\n            <li>\n                <a href=\"#\" v-on:click='getAllNotesByEleve(eleve._id, index1)'>\n                    <p>{{ eleve.prenom }} {{ eleve.nom }}</p>\n                </a>\n                <div v-for=\"note in notesMat\" :key=\"note\" v-show=\"showNotes[index1]\">\n                    <form @submit.prevent=\"putNote(note._id, note.note, note.num)\">\n                        <div>\n                            <input v-model=\"note.note\" class=\"input\" type=\"number\" min=\"0\" max=\"20\">\n                        </div>\n                        <div>\n                            <input v-model=\"note.num\" class=\"input\" type=\"number\" min=\"0\">\n                        </div>\n                        <button class=\"input\" type=\"submit\">Mettre à jour</button>\n                    </form>\n                    <button v-on:click='delNote(note._id, eleve._id, index1)' class=\"input\" type=\"submit\">Supprimer la note</button>\n                </div>\n            </li>\n        </div>\n    </div>\n</template>\n\n<script>\nconst SERV = top.glob;\nconst API_URL_ELEVE = SERV + 'eleve';\nconst API_URL_MAT = SERV + 'matiere';\nconst API_URL_NOTE = SERV + 'note';\n\n    export default {\n        name: 'modifNote',\n        data: () => ({\n            idProf: localStorage.getItem('idProf'),\n            idMat: String,\n            listeEleve : [],\n            notesMat: [],\n            showNotes: [],\n        }),\n        beforeMount() {\n            this.getListeEleves()\n            .then(() => {\n                this.notShowMessage();\n            });\n            this.getIdMat();\n        },\n        methods: {\n            profLogout() {\n                localStorage.removeItem('tokenProf');\n                localStorage.removeItem('idProf');\n                localStorage.clear();\n                this.$router.push('/prof');\n            },\n\n            async getListeEleves() {\n                try {\n                    let repEleve = await fetch(API_URL_ELEVE, {\n                        headers: {\n                            'content-type': 'application/json',\n                            'authorization': localStorage.getItem('tokenProf'),\n                        }\n                    });\n                    if (repEleve.ok) {\n                        let data = await repEleve.json();\n                        this.listeEleve = data.eleves;\n                    }\n                    else {\n                        if (repEleve.status == 401) {\n                            this.$router.push('/prof');\n                        }\n                        else {\n                            console.log(\"Erreur du serveur\");\n                        alert(\"Le chargement des donnés n'a pas pu être fait\");\n                        };\n                    };\n                } catch (error) {\n                    console.log(error);\n                }\n            },\n\n            notShowMessage() {\n                for (let i = 0; i < this.listeEleve.length; i++) {\n                    this.showNotes[i] = false;\n                }\n            },\n\n            async getIdMat() {\n                try {\n                    let repMat = await fetch(API_URL_MAT + '/' + this.idProf, {\n                        headers: {\n                            'content-type': 'application/json',\n                            'authorization': localStorage.getItem('tokenProf'),\n                        }\n                    });\n                    if (repMat.ok) {\n                        let data = await repMat.json();\n                        this.idMat = data.mat._id;\n                    }\n                    else {\n                        if (repMat.status == 401) {\n                            this.$router.push('/prof');\n                        }\n                        else {\n                            console.log(\"Erreur du serveur\");\n                            alert(\"Le chargement des donnés n'a pas pu être fait\");\n                        };\n                    };\n                } catch (error) {\n                    console.log(error);\n                }\n            },\n\n            async getAllNotesByEleve(idEleve, index) {\n                try {\n                    this.notShowMessage();\n                    let repNote = await fetch(API_URL_NOTE + '/note/' + idEleve + '/' + this.idMat, {\n                        headers: {\n                            'content-type': 'application/json',\n                            'authorization': localStorage.getItem('tokenProf'),\n                        }\n                    });\n                    if (repNote.ok) {\n                        let data = await repNote.json();\n                        this.notesMat = data.notes;\n                        this.showNotes[index] = true;\n                    }\n                    else {\n                        if (repNote.status == 401) {\n                            alert('Vous n\\'êtes plus connecté');\n                            this.$router.push('/prof');\n                        }\n                    };\n                }\n                catch{\n                    console.log(\"err\");\n                }\n                return false;\n            },\n\n            async putNote(id, note, num) {\n                console.log(id,note,num)\n                await fetch(API_URL_NOTE + '/' + id, {\n                    method: \"PUT\",\n                    body: JSON.stringify({\n                        note: note,\n                        num: num\n                    }),\n                    headers: {\n                        'content-type': 'application/json',\n                        'authorization': localStorage.getItem('tokenProf'),\n                    }\n                })\n                .then(response => {\n                    if (response.ok) {\n\t\t\t\t\t\talert(\"Note mis à jour\");\n                    }\n                    else {\n                        if (response.status == 401) {\n                            alert('Vous n\\'êtes plus connecté');\n                            this.$router.push('/prof');\n                        }\n                        else {\n                            alert('Problème lors de la mise à jour de la note');\n                        };\n                    };\n                })\n                .catch((err) => {\n                    console.log(err);\n                })\n            },\n\n            async delNote(idNote, idEleve, index) {\n                const rep = confirm('Voulez-vous confirmez la supression?');\n                if (rep) {\n                    try {\n                        let repDel = await fetch(API_URL_NOTE + '/' + idNote, {\n                            method: \"DELETE\",\n                            headers: {\n                                'content-type': 'application/json',\n                                'authorization': localStorage.getItem('tokenProf'),\n                            }\n                        });\n                        if (repDel.ok) {\n                            alert('Note supprimée');\n                            this.getAllNotesByEleve(idEleve, index);\n                        }\n                        else {\n                            if (repDel.status == 401) {\n                                    alert('Vous n\\'êtes plus connecté');\n                                    this.$router.push('/prof');\n                                }\n                            else {\n                                alert('Problème lors de la supression de la note');\n                            };\n                        };\n                    } catch (error) {\n                        console.log(error);\n                    };\n                };\n            },\n        }\n    }\n</script>","import { render } from \"./ModifNoteView.vue?vue&type=template&id=43345bba\"\nimport script from \"./ModifNoteView.vue?vue&type=script&lang=js\"\nexport * from \"./ModifNoteView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/mnt/c/Users/coren/OneDrive/Documents/Ecoles/Polytech/Devoirs et Cours/Année 2021.2022/Polyrecte/GitClient/Polyrect/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createElementVNode","class","type","_createElementBlock","_createVNode","_component_router_link","to","onClick","$options","_hoisted_6","_Fragment","_renderList","_ctx","eleve","index1","key","_id","href","_toDisplayString","prenom","nom","note","onSubmit","num","$event","min","max","_hoisted_11","_hoisted_12","SERV","top","glob","API_URL_ELEVE","API_URL_MAT","API_URL_NOTE","name","data","idProf","localStorage","getItem","idMat","String","listeEleve","notesMat","showNotes","beforeMount","this","getListeEleves","then","notShowMessage","getIdMat","methods","profLogout","removeItem","clear","$router","push","async","repEleve","fetch","headers","ok","json","eleves","status","console","log","alert","error","i","length","repMat","mat","idEleve","index","repNote","notes","id","method","body","JSON","stringify","response","catch","err","idNote","rep","confirm","repDel","getAllNotesByEleve","__exports__","render"],"sourceRoot":""}